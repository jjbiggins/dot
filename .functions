#!/bin/bash
######################################################################
#
# .functions: shell functions common to all process scripts 
#       loaded into oper's environment
#
######################################################################


tailscale () {
    sudo tailscale --socket /var/run/tailscaled.socket $@
}


# function to print argument to screen and to a log file
prinnt () {
    if [[ -f "$HOME/logs/$1" ]]; then
	logfile="$HOME/logs/$1"
    else
	touch $HOME/logs/${1}.log
    fi
    
    echo "`date +'%a %D %T'`: $1" >> $logfile
}


call () {
    echo "`date +'%a %D %T'` --> $@" | tee -a $logfile
    "$@" 2>&1 | tee -a $logfile
    [ ${PIPESTATUS[0]} -ne 0 ] && bad_exit "Failed!"
}


# ----------------------------------------------------------------
# Directory Functions
# ----------------------------------------------------------------

# Create dir and cd into it
mkcdir () {
    mkdir -p -- "$1" &&
      cd -P -- "$1"
}

# create public directory
mkpub () {
    mkdir -p -- "$1";
    chmod 777 -R "$1";
}


loadavg() {
    # sysctl -n hw.loadavg -
    #	Returns array of 3 vals
    #	Representing loadavg during last 1-, 5-, and 15- min intervals

    if [[ $(uname -s) == "Darwin" ]]; then
	local SYSLOAD=$(sysctl -n hw.loadavg | cut -d ' ' -f2 | tr -d '.')
    elif [[ $(uname -s) == "Linux" ]]; then
	local SYSLOAD=$(cut -d " " -f1 /proc/loadavg | tr -d '.')
    fi


    # System load of the current host.
    if [[ ! -z "${SYSLOAD}" ]]; then
	echo $((10#$SYSLOAD))       # Convert to decimal.
    fi
}


# Returns a color indicating system load.
load_color() {
    BRead='\033[255;57;31m'
    Red='\033[194;54;33m'
    Green='\033[37;188;36m'

    local SYSLOAD=$(load)
    if [ ${SYSLOAD} -gt ${XLOAD} ]; then
        echo -en ${ALERT}
    elif [ ${SYSLOAD} -gt ${MLOAD} ]; then
        echo -en ${Red}
    elif [ ${SYSLOAD} -gt ${SLOAD} ]; then
        echo -en ${BRed}
    else
        echo -en ${Green}
    fi
}

# Returns a color according to free disk space in $PWD.
disk_color() {
    BRead='\033[255;57;31m'
    Red='\033[194;54;33m'
    Green='\033[37;188;36m'
    Cyan='\033[51;187;200m'

    if [ ! -w "${PWD}" ] ; then
        echo -en ${Red}
        # No 'write' privilege in the current directory.
    elif [ -s "${PWD}" ] ; then
        local used=$(command df -P "$PWD" |
                   awk 'END {print $5} {sub(/%/,"")}')
        if [ ${used} -gt 95 ]; then
            echo -en ${ALERT}           # Disk almost full (>95%).
        elif [ ${used} -gt 90 ]; then
            echo -en ${BRed}            # Free disk space almost gone.
        else
            echo -en ${Green}           # Free disk space is ok.
        fi
    else
        echo -en ${Cyan}
        # Current directory is size '0' (like /proc, /sys etc).
    fi
}

# Returns a color according to running/suspended jobs.
job_color() {
    BRead='\033[255;57;31m'
    BCyan='\033[20;235;240m'

    if [ $(jobs -s | wc -l) -gt "0" ]; then
        echo -en ${BRed}
    elif [ $(jobs -r | wc -l) -gt "0" ] ; then
        echo -en ${BCyan}
    fi
}



missingcommand () {

  # TODO: put this somewhere else
  # if the command-not-found package is installed, use it

  if [ -x /usr/lib/command-not-found -o -x /usr/share/command-not-found/command-not-found ]; then
	  function command_not_found_handle {
		  # check because c-n-f could've been removed in the meantime
		  if [ -x /usr/lib/command-not-found ]; then
		     /usr/lib/command-not-found -- "$1"
		     return $?
		  elif [ -x /usr/share/command-not-found/command-not-found ]; then
		     /usr/share/command-not-found/command-not-found -- "$1"
		     return $?
		  else
		     printf "%s: command not found\n" "$1" >&2
		     return 127
		  fi
	  }
  fi
}


#--------------------------------------------------------------
#  Automatic setting of $DISPLAY (if not set already).
#  This works for me - your mileage may vary. . . .
#  The problem is that different types of terminals give
#+ different answers to 'who am i' (rxvt in particular can be
#+ troublesome) - however this code seems to work in a majority
#+ of cases.
#--------------------------------------------------------------
get_xserver () {
    case $TERM in
        xterm* )
            XSERVER=$(who am i | awk '{print $NF}' | tr -d ')''(' )
            # Ane-Pieter Wieringa suggests the following alternative:
            #  I_AM=$(who am i)
            #  SERVER=${I_AM#*(}
            #  SERVER=${SERVER%*)}
            XSERVER=${XSERVER%%:*}
            ;;
        
	aterm | rxvt)
            # Find some code that works here. ...
            ;;
    esac
}


xtitle() {
    case "$TERM" in
	*term* | rxvt)
	    echo -en  "\033[0;$*\a" 
	    ;;
	*)  
	    ;;
    esac
}



#command man g$
#    for i ; do
#       xtitle The $(basename $1|tr -d .[:digit:]) manual
#       command man -a "$i"


#-------------------------------------------------------------
# File & strings related functions:
#-------------------------------------------------------------

# Find a file with a pattern in name:
ff() { find . -type f -iname '*'"$*"'*' -ls ; }

# Find a file with pattern $1 in name and Execute $2 on it:
fe() { find . -type f -iname '*'"${1:-}"'*' \
-exec ${2:-file} {} \;  ; }

#  Find a pattern in a set of files and highlight them:
#+ (needs a recent version of egrep).
fstr() {
    OPTIND=1
    local mycase=""
    local usage="fstr: find string in files.
Usage: fstr [-i] \"pattern\" [\"filename pattern\"] "
    while getopts :it opt
    do
        case "$opt" in
           i) mycase="-i " ;;
           *) echo "$usage"; return ;;
        esac
    done
    shift $(( $OPTIND - 1 ))
    if [ "$#" -lt 1 ]; then
        echo "$usage"
        return;
    fi
    find . -type f -name "${2:-*}" -print0 | \
xargs -0 egrep --color=always -sn ${case} "$1" 2>&- | more
}



extract() {

    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}


# Creates an archive (*.tar.gz) from given directory.
maketar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }

# Create a ZIP archive of a file or folder.
makezip() { zip -r "${1%%/}.zip" "$1" ; }

# Make your directories and files access rights sane.
sanitize() { chmod -R u=rwX,g=rX,o= "$@" ;}

# Replace spaces with underscore in file/dir name
spaces_to_underscores () {
    for x in *; do
        new_name=`echo "$x" | tr "[:blank:]" "_"`
    
        if [ "$x" != "$new_name" ]; then
            mv "$x" $new_name $2
        fi
    done
}



#-------------------------------------------------------------
# Process/system related functions:
#-------------------------------------------------------------
my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,bsdtime,command ; }
pp() { my_ps f | awk '!/awk/ && $0~var' var=${1:-".*"} ; }


killps() {
    # kill by process name

    local pid pname sig="-TERM"   # default signal
    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
        echo "Usage: killps [-SIGNAL] pattern"
        return;
    fi
    if [ $# = 2 ]; then sig=$1 ; fi
    for pid in $(my_ps| awk '!/awk/ && $0~pat { print $1 }' pat=${!#} )
    do
        pname=$(my_ps | awk '$1~var { print $5 }' var=$pid )
        if ask "Kill process $pid <$pname> with signal $sig?"
            then kill $sig $pid
        fi
    done
}

mydf() {
    # Pretty-print of 'df' output.
    # Inspired by 'dfc' utility.

    for fs ; do

        if [ ! -d $fs ]
        then
          echo -e $fs" :No such file or directory" ; continue
        fi

        local info=( $(command df -P $fs | awk 'END{ print $2,$3,$5 }') )
        local free=( $(command df -Pkh $fs | awk 'END{ print $4 }') )
        local nbstars=$(( 20 * ${info[1]} / ${info[0]} ))
        local out="["
        for ((j=0;j<20;j++)); do
            if [ ${j} -lt ${nbstars} ]; then
               out=$out"*"
            else
               out=$out"-"
            fi
        done
        out=${info[2]}" "$out"] ("$free" free on "$fs")"
        echo -e $out
    done
}


my_ip() { # Get IP adress on ethernet.

    MY_IP=$(/sbin/ifconfig en0 | awk '/inet/ { print $2 } ' |
      sed -e s/addr://)
    echo ${MY_IP:-"Not connected"}
}


ii() {   # Get current host related info.

    echo -e "\nYou are logged on ${BRed}$HOST"
    echo -e "\n${BRed}Additionnal information:$NC " ; uname -a
    echo -e "\n${BRed}Users logged on:$NC " ; w -hs |
             cut -d " " -f1 | sort | uniq
    echo -e "\n${BRed}Current date :$NC " ; date
    echo -e "\n${BRed}Machine stats :$NC " ; uptime
    echo -e "\n${BRed}Memory stats :$NC " ; free
    echo -e "\n${BRed}Diskspace :$NC " ; mydf / $HOME
    echo -e "\n${BRed}Local IP Address :$NC" ; my_ip
    echo -e "\n${BRed}Open connections :$NC "; netstat -pan --inet;
    echo
}


flushdns () {
    sudo dscacheutil -flushcache ; EXIT_CODE=$?
    if [[ "${EXIT_CODE}" == "${EXIT_FAILURE}" ]]; then
	echo "Error: 'sudo dscacheutil -flushcache' returned exit ${EXIT_CODE}"
    fi
	
    sudo killall -HUP mDNSResponder; EXIT_CODE=$?
    if [[ "$EXIT_CODE" == "$EXIT_FAILURE" ]]; then
	echo "Error: 'sudo killall -HUP mDNSResponder' returned exit code ${EXIT_CODE}"
    fi

    echo "flushdns: 'sudo dscacheutil -flushcache ; sudo killall -HUP mDNSResponder;'  completed successfully" 
}


update_macports ()
{
    sudo_pass=`cat $HOME/.passwd | grep $USER | cut -d ':' -f2`;

    echo "$sudo_pass" | sudo -S port -v selfupdate &
    BACK_PID=$!;
    prinnt "Starting macports selfupdate...";
    wait $BACK_PID;
    

    echo "$sudo_pass" | sudo -S port upgrade outdated > /dev/null &
    BACK_PID=$!;
    prinnt "Updating outdated ports....";
    wait $BACK_PID;
}





#  This is a 'universal' completion function - it works when commands have
#+ a so-called 'long options' mode , ie: 'ls --all' instead of 'ls -a'
#  Needs the '-o' option of grep
#+ (try the commented-out version if not available).

#  First, remove '=' from completion word separators
#+ (this will allow completions like 'ls --color=auto' to work correctly).

COMP_WORDBREAKS=${COMP_WORDBREAKS/=/}

_get_longopts() {
  #$1 --help | sed  -e '/--/!d' -e 's/.*--\([^[:space:].,]*\).*/--\1/'| \
  #grep ^"$2" |sort -u ;
    $1 --help | grep -o -e "--[^[:space:].,]*" | grep -e "$2" |sort -u
}

_longopts() {
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}

    case "${cur:-*}" in
       -*)      ;;
        *)      return ;;
    esac

    case "$1" in
       \~*)     eval cmd="$1" ;;
         *)     cmd="$1" ;;
    esac
    COMPREPLY=( $(_get_longopts ${1} ${cur} ) )
}
complete  -o default -F _longopts configure bash
complete  -o default -F _longopts wget id info a2ps ls recode
